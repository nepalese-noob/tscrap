
import marshal
from cryptography.fernet import Fernet

# Encrypted data and key
encrypted_data = b'gAAAAABmZeFmPWf3tZSp8q3NESQYXRbVhhWWP_Gx9QPoMejIdyMLkeudMY58v4ZBiB-agduOkczI07uecm8WhKRz6U7ExSwaxRlmFH_It5v2KC29E1IiK5D4ykQJpbz2t50SwCYUZQuOdBeZx9uE-iwp5S7kH9c_T28KJhpBaLfBFEHkTGEAe8PFnmXg5RCM_EdxxRtO2LG5oIE6RCIe3-PEpxUWmXrCXsM-PPlp3gsx47iD-bDJWQ1KB4xktkAyx9qURh2Bdr-zDVGQgTEddaHSp-OQW_zRhbzJTZ_TBpqC0nu_MFwCKjzEI3GJzoCCO5XR8xf59vUlh_KMA_eUBkAHqLUticrHOSO4pQzjNtGrKoIlpSZFovk-SoCTzY2tfd01FuPFZwUP1UBSsXDUjnuSutifZy6Xl9Y3zKUsOxQpNnLLrPbFdshZyCyuWrDxtGixviDnTpWtdCr3pf_v9TtAyMvPns3D8dgqIeoMESldGR4xazBDSCvFE7vzJDGP0z7BmzPlOj5QmT5eDtI6YuTKLR6bvObg5yQNJYxbmlVdl2udZDBgCU4rUeH5N0UjEq-hL7SCC0H33RNutUx95NVLbwvHiq_o0vHNvko4zqw-qOaaTkOrPPi7EitGV9f_9tD58B6BmEAw7-Sx8qEE73KXniE2FAAWcKKLuEzuKjjzWYWLkHb2-xkXrZbDoCEd7Sgxvplu6Ez0l6ybRh6JLuOioGReiWheXgyibzBlfxTwXm-oxD2MaBWOT921YC81Byqs0L3kutYOIDiZvCxeayG_72GeK7MgI1orjNHJf2UjxIWx3ToIEqxabfuTYjg_SZBRfueaC0KDfIPPr0CKBR6N7C4gP5CZnqWzgqgy-5Spivvxh6T9wcAyJuGnnGFcNsjfkit7KdYXZyAUufEZA37sbT8BO5Deh-tx3Jb5WgwVQN94Di6WdanVfwjaMZSPoBKTSIBbz0Nj5Ph51Q2HA-bq9Ojh-t_5AcNM5T_pi-YKMNFB5_WKl-271ldLoCB4ql_FLogJp6RHQIn1bODL0sQtRtmXgDRsVTIVlFKbijjPePFjeuS9sXFTrNQOvlFWCb82WKBKFUFKBoMam9CqmEp6K42lCzYvv1oNOA_SjhreCT_A34q-66Yi36TGKps1oI-YWUS_VXQC3wU3J5ESozD0k6B4fuI8zYxnoj5GcBk-KWVaTr107E9Jzy7NJk1p0sH4cCKBmEd8wYTDg8bftt28p7dc-RDkLmcQoABjN1sKqVb8vSTE6efkM7RaUDmuwNY0KZo1Ap06szk4HzUeH7qLcDHWiesJi0PId6EEHynZ2q0OYsG2n5OQOhIUrt3_ncSYN-mVa09Y8nLPNknnSVIijp-WtLurlyyMCNzwlVFTuKp-bHWhh7zvKOMIgIF3321skVTwxDcgn75XdifqEtk6Wr8c_eNAHjYaXq_U5ID3AQda7Q3z7add-XjbE2HYroXIqbvg_TZa5pZjZZxsKiqLzulZcEA52QrrH1YCUm_CYj4qcfo6hWjLgM-yUIuo4ylFbetNpIhRUFx0JfxvzcUCTe2ww9g-FYdvGlQAqJg1trEUi9mSYNvyzcpUm1ZPRRn3szTXkOvK0G65V0EEIU63jSEI7iv-roJYjbcM5ckPh09nMy_7IEmu4LEJM0qlZpBGHsXECCqaxfdTfxBlDQXGnyyPpE7bpOCfvYCyc8sB0eRcN42KfJUrH2BQbzBGLnIOsq-n_C8In0-x0C3lVMQb--Okz1k-PeJ0A9wrKNm6tpCSboFZ4dHeAN7K7dXJG0oPVO8d7j7qmM7bV7jMtsaFSetxu7fasK2kdZNaNHN_4xdegwA-uRWk2sd3XwE6HUWNJ3F0KsuoxJZK0UT851r8S9ryHzurMTragCzGBMOmqFpn_kjyFseKk7LzPuU_J_03FpzoK2a7U2vo9t1BtdTJs_WOYc3JJMolzxzOcbjf0-t1iE-ioZC9z1E5s5iITjvJUyiosm_yYetA_hqBU8M6AHqdQ3K82D8iv2PudHbW8YUOLwZknnDkXqBqNjnZdVQ8zqfYiQvKlL4MVYRsC-Qk5FcigjIeTKYBLtqEYDFAMB6u_Z0RPa4kHryDpItyFnHXdW-r98EpDMhE-kl-LYby3YCxOfVR4ejzMhULvaI-N_xHbuW8tf_hyv8kU0gDt3Ym9nkjX4hglPK7eaCpS-jQdJWeUxQqsrrKAPW0VS97qJODhtbGp-cOQIeLAs9Jde7YM8GTDlM0Hzn4KRptngEOfYVxk7zAMO9w0Ru5_Bwvn0mWnCcxxNpmzotxjMN8cwGGPIw3qlpaucTx3S7gpVFspX1NgRGB423Bl5LPkVMQzPW9zh0MxKoEtRefpzhkbpMLZOLB85p46_tW1sT91egtZIgcdTN6LkWJk6diMkG5Ankp0TRx9Wk5dCNlCHtkMFSKNvCV8DZEH8bJ6dkWlToCF_-LL4lLPy9QQ2ITNZVWuSH9mPGEUjZl4253fis5WZ-Hxi3OLlyYLrns0AoBnxjI74eoPSpRm0cTeIYutVbhYtYJB2RxxtitxoI3HKeb8M1aS_VN0ls5lmwF_QLXZV4yvDX3ki6J0eWfhwG89z0ygXPpEwqMYjKUlFOF1DhRZJn5pNoJ4ZeK7W0-pfvXuVF5DZHVV6a-l9z6ETMnntNe7lWMxT_VQSPjPby9qj0YXAIponq9mMD1B0GkRmR0hgtEemYKzEr5o1wJNmnqT-lCGs3Puh9mGB5ckKcE1UX8BQn95XkyKb5fZ1qKhlEW7HUUl6mezECDr738rMfoLz24zyHHPF8bnGIMwM_wZ6XkDGeXxBqlZLNNc-BI2Job091MYqQdqhfL0ok9zr1IqkXbh34KNhPsveVZ1_fJrKs_581fL3rUHkd4d9978lqezZh48F19t0F9WGIMDOEWy1Yfy-x4zy9bjkZ-A1H7oyx8sl7mv9zvv1SMWyJB7RxJadV_yvamM7LyCqMWF70k22EekcUdCFEkmiQzYylvNrg4kIMEnjNEf0pVO4KOYQxAHd9QCcTsQvEQHpTqfUpKHyAZSZ2zwvGALiz9cBtHNLXdLKvkeDquFXNHJVhsrT1wKcs0ar1dMEcyPf6JtelBTESBA4Y1ba3CEwLKTNTi9f3WjhfmcgGoqpqd3egGYXSfnRdqxhMdGQLlKCUg0miU_wJo5UmWfKv2o1EwVXSiRluQaH8vcK9qx4y8aTWcAuDfbyBTbSOtA1UswoIMTjAaVeWOrU8CW_LeNTCuDB9kb1uHPoWQgmz9PamvRCdcGT8Tk1fE05JtDQcyaojafYpdYtQmZ9VWON-_3vEUMrZ_aBWbYIEAbrnM4TznB8mvzehcDPYFJo4p4aJwD9PxPfM19Yu0zLNoCTEJJyiizfhGT62GJh8J40jI7oUvRzr5G8i37G1UE3qlEXjhlgecZ6ltJ57A4QDczca8vutZ_-Ca2rFe1Cgd3TbvDXZ5D6cUVACMRiW1EuHtRPzaEKTUpxFO4ZE6Jc0FkgEbRolEn5z0nn50pKpiVxcCRwq3wLWqYI-UM2M8C9MCf0fzq3D9C7kr2CaXihsk4pieDHbMgsoWLNbszGPFYsj_Fk75Sw2eYhsKyGGgmRzCy4ulaE4bNBiT2l-0wZHhS-3ew81DRM3qxyDk6cZ1wTvJpxNKvpKkpGgpQZ66N-6JortkddsIq0nBOptFbwelamPxbLDpYdO90gdS07ucBsODRfTNJ2moYd39sBDG5ZxSyBbf6mKa9plWwY_Isq1gKBG88MANDx0W1NLCqcbFLXEvGJSwikxWdgYILJ6sZahiYq3PPawCOwNccNj3CaS8Cnz7DTomTpMT9IYnfUHkr-Nkd3UhTSsZDEV1hE4RFKLhCOJPEeAbav1z0M-DxcNJfGKqHJBJfCFe2jDk5kipM1coj4yDFO9ceLvWIjivx1jPZOthDefzxVhwkzbbKS22f2jD8dUec1r0LKpXemTXvjnfRVmYWBgg8RhKLuFNw7fxK92NtUuFeMSTDBg1f5N8CvWLAnpOH9mIUk6W727c-7L82ZRfI52MQ27adN2IYFATBtu75_K3oSPwjSZsaDnAacyfphYM7rN2dEBdCUkqmGcophhVOSkFUZtDWyM7q7q1sunSF7V6sS7bvKR1NVkiDxdxzGQ27epn3mnaHbrQOAkPKZBv--cZMiW06jKIiTwm1BKv8RuHawTPdeev2W0lZT0xJwanF37-TkS8g-RLPuxmCMxwbkDtAP4qmE8-q4PvspJXi_yTC6LttUuBAHHd69LXETN6lPwK_apI8v1ZO6oz_D5gZkjgmiZC6h84I9rCLY-Ojj_sTS4iu1zR4ljSA1l21RsbHvklIyTOOKSFzVKgU32L9BE5hpVRhvReF9pNESEgnv7b785R6mSqU8_CUrQs22fFKP91OBFtt12Kuoy5Ezpz7kzOsmAKONS8lJz4BivVx4j5_WbgWcrAicc4tnlhkdIOjKyHG2pMY_nSovOK_gNW9KmOSgdSq_r94BRkMTq2S8L9eup6ykAQIFvDvjLWgGLuD99Df2Q3saR74qQmFIVdaBBya9prXdeQMXsxUgc5sDI8nqFyz9se4kgk-CDjEkEsQdA0NDDvr2A-jipWTPAGHXLAQjSUn4-BtkTIbWWjj4DUBMilR_IJXheJ0nP-NNhuCflp-ef1bSVHVTf5OX2yfrNyAg4iBUAyuteYSh9g5TY7PpIOEPrprGBiH8yyanjykZJAem2d1cu7vTn1QBwz9AhKup8vVOrLujGYmijKyir5cJ-2l6HrIIA5h4UEnmQNwubd-81NiXw7wD5mOyBgK1Leo3kA-Tz4bFgkh8dAMPRCuN4Ss2OsdsNWzllzlug6PHWM3gH5D7aLwCbObcHNPgShPieXeuG4ZfF-EaMrWpPYM8M__F74mVQYfxtN318vSE9S74WJ6fKkGCr_XJm1HvYiUp-RK4Kv5T8epbUiu_rJ464HaBaf6L-CFWdjdBZHYEEG9DDCQTfA2vhXDBp4J7nJ32TbRSVWNE37giTPw_XK6rVLaYDQTHEiTPoCpCOn98GNfJmxuaIYUPDuiZ0IxiY4WuHfjv57vHstxmmX6QX3x8giCixHIazZkZJaydNx7op8K5Ph-CJ5TR4v9VvQIz-HhMpMmCF-gbTwxDO6po98S0vFiXXOwQIEqdECRg8R1Q0Z6XVYgR8QKQ5yY1cDT9DJ-O4KJ3PgW895kP1Uye3jEVugZUbaX6JBRTXFfO9TtCSU1z4fbKQ8UN4znIzkv46oYhedP5Wymrd5CVBxPW9lR4m1QqrPs_ulx8N9pNzPHFz8e6IkqLVKebRrER_EiK1bV9MmN4VTrzghlNI0S-vnImWvuPPRglztThkr2uRO_-UZIPxJAKmK1YwzWCi6Lf7QCB7eTvA028mJKs4NCsg0K1MO5utANDD20E8gdvEHshvKGar4e0Q7q1H4hP6RYJ1tQDXWFERDO4E_JzBMBM3Ux52CZRr8sJRY26alrkye5WkD2olSvQsDMcSQrAwiJLoU_RBMiH9TJHeXPtWSIAMacP03ocNKJbrq0hDSDFqc-IoqWs8VwjZAb3pDEnlikKk7Q8LP9AkfMwARLUAKyT_WrJzd3HOxm_YsbtRaYCzAMA5fNYprUSBFfG473qlZq40XAuvgf41yGc3ZL1gpQRzWgNQl1UQHCAO2rRF9jLC5NIZpTGjuJrqjgHGXaxU0CTT7X5DrkPhUEd3ONqKR9HBTGJ_7CBHK7rEbhKfc6RLYhWc24OmiA1MMG_JFBjwUPNjG4uyv9x9yafkeu8av2cdy5qJXPvZCpoBsLeK2TGoAP2eIwMyOrDloWfnRclraDP_bO62KgHrM2E0mggrR3b_HNaCf3QX8KofvBIXszjdM3FJLbZ6hyxudxb4wxqzq58HjSp-8ZYQpcASzYzwgtfYwkTgnVoN5betSdWrpGIcjoNN4M_Ap-oErndizorJeBO3O-1JL_Qj0psIEU4NihUBP76T6eJ-eHjKIuCQ1ovNy-oHHFlz2GoWkEX4SL50V-PyTTEcDdU7flqf1dUYwsJmWarK84HR1tvWrgAW2sCn_Ofe8qnWN5w_d4sOEUW4GSWyKse_WrOPqW2VGZuZTw2cGZBPRPbHPAO6HA1lYhVcutB5MIXRfulTx8yS6UQHLcKByE9IlOPGHxox10GeLbcDwihOWdp4J4y68mNFjTXlTBsrTn_qjZHw8GLUr-e5OcfI3fmzPlTJHZnwbbWlL19c_1luBsD93PRbmEu-CKnFxcmkCklsTUr0AQXeShhwSra1SmxEoOhhl7u07pIM6s4k-84SdlEY-_CAbcBeTRn9RZwiIYDMPdmT3kykaE5gE1JccZyYMogVr0N1xpDcWFhyBRfjXOxGxAq2HoWjIkD-dDp_FXIkL1kmi7qvuCq17izcXpXV_JzXBchGeBm8zIGqFY_Z9BnXuUdLbM2_S_gpyN4_rqOkxR6O2nYDtoahz-KFaW-NDw-RwgNwFX5CZJUo-r8swFCva5uUzJ-Z0YUzMSuQMxZzwd6rC98FwiUhT7o-_BFIlLP_0oKc9oMrzpOKAHWiF442aWatiD2sHliOwGcIR91w-DilUyzue-2FkqKEjR3Bd7f_TFVn7AO32pjZLIXy7aEqW1TtLhb6I3Zk4OeL5dnBs0rtMVPYLlassdzm_gSWw6olcu8cIaImi7WdKE-6HImJoqSXGKX3TplHXFjlPuqrsYmCrd1XGRySqHdk6wqUvbbwKqWM3k-3W0hSPCx44q0SN8mxK7LpsS7IZjltcXkHCk2rcvf8LMFUhxQIYe9v6VQptryyUG-Kdzt6Bm5FpMY-0sNlJemf1QSD0NNVtIKDtRL5T40hOAoODcaTOb1qylVIhu1hQiKJd6LozUpxA8nTy_51xRyEtg44Fdt6eXsILHGZEh4aro3Lfbehe5KQPCFDG-b96sFteUbkr96VgEewY0UcfHZXWluYFcYL1MUvL3BN2jc1XLJYzCN4F0DSGHKsIJdz0_G4Gl-zDCOer3LHl7YDlxyDhRiexqEnGWHXQAo-h7ooeLyKbVtg86Pjmx-pOuma7Cp1Tu7_VOptqU2uj16NkOIcSsFRyrabBsFAgduh_jDFFwLd63w58a4lY1shoWpQyJY3nz6OFaYqIAB78W6m4MWJnUZhWnD6slJ9wt07VTbNbMNJNYd7e-9ybJs-MsPpxDUgAMXz1Z4USLv5PYcKwFtEcWus9LxWlU7fnWOPkPL7fEPWOjRKOrYvcqZAmnl6_PxpP4gNefJjiS1fZGPos4XeLegmPJJrQZQu1zCPazm101kUfab6mCKyoMnuEkVUTnGQrq7-TBdFBAdqCkWL1nyDePCsF9jiOFGm9tmmgC6_WEsfIuu6K_yw8ov5buWGJ6BAS6NWSjMYon6EWaN4Kon7OAUjDXO3TRTq6YkPgXtsBpau_9EvRzdNToHidjGt9oyuj7BII1u02RHyDAPGzuHDPk04KetY9rGz3Iy6VoORl6Ci-4rB9HpUctZl_SCL1rY8X64PjEtvDCgubMIwhPedDNVeCGkRrdOy_8S-_iOUqM6-od9BPYzHdED8nkhRmelPRtCBciFX3MLsrv1_Ga8EanZN4xTi0QPngccoySxep8RLO7bxLcV3RnyG9zLY47WQvxRr1CVsOYGyXD-cgStj7sOmqw7W8-34sozaoOOxe3P7rQ4pWk7WT3a1Ho_f6e1yObk30cvAon6QvpOv4arQEmY5XlAo6KyqkyG2ucs6W9XMLCx7mG3KFRBIwV0bjByk0dFWELY1qJz60eoYAeUT8jO153Nr4gXiQwunp-IOAX5PUUP_wEz_owaILyUtjCys6Fliti06Yb46L0CqBn7AV-2JGIFP181bPR9wc5Cpfre0JdVZzrCqIytwep2t15W6pKBve_XjApElz7hWxvk8XfjnyuWpVYyKChUh8jr2qqSkz3tanU53HqyCQmJ5wZuuu7HA0GrDOJ0geEQRnwYVnioxKbDL2vybaVDEJlDfRoCUTnSnE_aQoEwRPaQDUy5Q8jT1HV_nMJrNDGjK2ljvsK7yBZtqqu1IcNP0eM0t4SUa7ZdsrHWkEp3JonKJ5jth27RspvDnIJU7adxjtnh3CtkIhLziEKfa4XJZXTBGHJmjKA1x2U4QU1XhLq4hT9ahpFl3IuFptwMltwZm0uLbQYzABPosfe7SVMOhvEMEuS-CGvYV2RiimmXSbIX-n8h-SNVWtFxeNNqZ3qLG743VZHX6cISHut5YnHWkMlQsQn9vcEwX6ZJwkxsjB8rsceQOw4ioB9oYkoBd6m1RMBTfIXU8VfPfAiOH8c85VMokOEOc7GW0GQKQ15fzN4rKpQFkyeVRGrG11cKbrIgEuafU-LULc3Gk9X6B_VhN0yJj5a6ZxZweDOo2TsQJMZgdw_mNwbglrvUJe7I5P1hZv06NPNAhk3W1afNoDyUbccEZkeCZ3GZ03Y9a3JmGhRvxovqgmvF0nGGkVYDwUJOsggnc42jdYYCLuwzk0qJ8QSGoHjoFBphY0y4nJ7GlZK1IlCLDXkA=='
key = b'cGz6qh8zx8h_O3aOh4f8hMAnbluxzQk0ryIr5FAoP7Q='

# Decrypt with Fernet
fernet = Fernet(key)
decrypted_data = fernet.decrypt(encrypted_data)

# Load with marshal and execute
exec(marshal.loads(decrypted_data))
